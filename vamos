#!/usr/bin/env python2.7
#
# vamos [optoins] <amiga binary> [args ...]
#
# run an m68k AmigaOS binary
#
# written by Christian Vogelgsang (chris@vogelgsang.org)

import sys
import argparse

from musashi import m68k

from amitools.vamos.CPU import CPU
from amitools.vamos.MemoryBlock import MemoryBlock
from amitools.vamos.MemoryLayout import MemoryLayout
from amitools.vamos.MemoryRange import MemoryRange
from amitools.vamos.MemoryAlloc import MemoryAlloc
from amitools.vamos.MainMemory import MainMemory
from amitools.vamos.ResetRange import ResetRange
from amitools.vamos.EndRange import EndRange
from amitools.vamos.AmigaLibrary import AmigaLibrary
from amitools.vamos.AmigaExecBase import AmigaExecBase
from amitools.vamos.LibManager import LibManager
from amitools.vamos.SegmentLoader import SegmentLoader
from amitools.vamos.VamosContext import VamosContext

# lib
from amitools.vamos.lib.ExecLibrary import ExecLibrary
from amitools.vamos.lib.DosLibrary import DosLibrary
from amitools.vamos.structure.ExecStruct import *
from amitools.vamos.structure.DosStruct import *

# ----- classes -----

class MusashiCPU(CPU):
  def __init__(self):
    CPU.__init__(self,"musashi")
  def w_reg(self,reg, val):
    m68k.set_reg(reg,val)
  def r_reg(self,reg):
    return m68k.get_reg(reg)

# ----- main -----

# --- args ---
parser = argparse.ArgumentParser()
parser.add_argument('bin', help="command: AmigaOS binary")
parser.add_argument('args', nargs='*')
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be more verbos")
parser.add_argument('-c', '--cycles', action='store', type=int, default=0, help="maximum number of cycles to execute")
parser.add_argument('-b', '--block', action='store', type=int, default=1000, help="cycles per block")
parser.add_argument('-m', '--memory_trace', action='store', default='off',  choices=MemoryRange.trace_levels, help="trace memory: " + ",".join(MemoryRange.trace_levels))
args = parser.parse_args()
mem_trace = args.memory_trace

# --- amiga binary arguments ---
bin_file = args.bin
bin_args = args.args
print "vamos: %s %s" % (bin_file, bin_args)

# --- create memory layout ---
print "setting up memory"
mem_size = 0x1000000
mem = MainMemory(mem_size)
print mem

# --- load segments of binary ---
seg_base = 0x010000
seg_size = 0x070000
seg_mem = MemoryAlloc("segments", seg_base, seg_size)
mem.add_range(seg_mem)
print seg_mem
seg_loader = SegmentLoader( seg_mem )

# load binary
seg_list = seg_loader.load_seg(bin_file)
if seg_list == None:
  print "ERROR loading binary: '%s' %s" % (bin_file, seg_loader.error)
  sys.exit(1)
print "binary:",bin_file
for s in seg_list:
  print s
prog_start = seg_list[0].addr

# --- setup stack ---
magic_end = 0xff0000
stack_base = 0x080000
stack_size = 0x040000
stack_end = stack_base + stack_size
stack_mem = MemoryBlock("stack", stack_base, stack_size)
# prepare stack
# TOP: size
# TOP-4: return from program -> magic_ed
stack_initial = stack_end - 4
stack_mem.w32(stack_initial, stack_size)
stack_initial -= 4
stack_mem.w32(stack_initial, magic_end)
mem.add_range(stack_mem)
print stack_mem

# --- setup heap ---
heap_base = 0x100000
heap_size = 0x040000
heap_mem = MemoryAlloc("heap", heap_base, heap_size)
mem.add_range(heap_mem)
print heap_mem

# setup arguments
arg_text = " ".join(bin_args) + "\n" # AmigaDOS appends a new line to the end
arg_len  = len(arg_text)
arg_size = arg_len + 1
arg_mem  = heap_mem.alloc_memory("args", arg_size)
arg_base = arg_mem.addr
arg_mem.w_cstr(arg_base, arg_text)
print "args: %s (%d)" % (arg_text, arg_size)
print arg_mem

# --- libs ---
lib_base = 0xf08000
lib_size = 0x0e0000
lib_mgr  = LibManager(lib_base, lib_size)
lib_mgr.set_lib_trace(True)
mem.add_range(lib_mgr)
print lib_mgr

# register libraries
exec_lib_def = ExecLibrary(lib_mgr, heap_mem)
lib_mgr.register_lib(exec_lib_def)
dos_lib_def = DosLibrary(heap_mem)
lib_mgr.register_lib(dos_lib_def)

# --- setup context ---
cpu = MusashiCPU()
ctx = VamosContext( cpu, mem, lib_mgr, heap_mem )
ctx.bin_args = bin_args
ctx.bin_file = bin_file

# --- memory init ---
# create CLI
cli = heap_mem.alloc_struct("CLI",CLIDef)
cli.w_s("cli_DefaultStack", stack_size / 4) # in longs
cmd_mem = heap_mem.alloc_bstr("cmd",bin_file)
cli.w_s("cli_CommandName", cmd_mem.addr)
print cli

# create my task structure
this_task = heap_mem.alloc_struct("ThisTask",ProcessDef)
this_task.w_s("pr_CLI", cli.addr)
ctx.this_task = this_task
print this_task

# open exec lib
print "init exec"
exec_lib = lib_mgr.open_lib(ExecLibrary.name, ExecLibrary.version, ctx)
print exec_lib
exec_base_range = AmigaExecBase(exec_lib.base_addr)
print exec_base_range

# --- start cpu ---
# prepare m68k
print "setting up m68k"
m68k.set_read_memory(*mem.get_read_funcs())
m68k.set_write_memory(*mem.get_write_funcs())
m68k.set_cpu_type(m68k.M68K_CPU_TYPE_68000)

# reset CPU with a temporary reset range
print "resetting cpu..."
reset_range = ResetRange(prog_start, stack_initial)
mem.add_range(reset_range)
m68k.pulse_reset()
mem.remove_range(reset_range)

# setup tracing
mem.add_range(exec_base_range)

# setup RESET = end handler
end_range = EndRange(magic_end)
mem.add_range(end_range)
stay = True
def end_func():
  global stay
  m68k.end_timeslice()
  stay = False
m68k.set_reset_instr_callback(end_func)

# setup arg in D0/A0
m68k.set_reg(m68k.M68K_REG_D0, arg_len)
m68k.set_reg(m68k.M68K_REG_A0, arg_base)

# enable memory tracing?
mem.set_trace(mem_trace)

# start main CPU loop
print "start cpu: %06x" % prog_start
total_cycles = 0
cycles_per_run = args.block
max_cycles = args.cycles 
while stay:
  total_cycles += m68k.execute(cycles_per_run)
  # end after enough cycles
  if max_cycles > 0 and total_cycles >= max_cycles:
    break
  # if invalid reads or writes then abort
  if len(mem.invalid_reads)>0:
    print "ERROR: invalid reads:"
    for e in mem.invalid_reads:
      print "R(%d): %06x" % e
    stay = False
  if len(mem.invalid_writes)>0:
    print "ERROR: invalid writes:"
    for e in mem.invalid_writes:
      print "R(%d): %06x" % e
    stay = False
    
print "done (%d cycles)" % (total_cycles)
