#!/usr/bin/env python2.7
#
# vamos [optoins] <amiga binary> [args ...]
#
# run an m68k AmigaOS binary
#
# written by Christian Vogelgsang (chris@vogelgsang.org)

import sys
import argparse

from musashi import m68k

from amitools.vamos.CPU import CPU
from amitools.vamos.MEM import MEM
from amitools.vamos.Log import *
from amitools.vamos.Vamos import Vamos
from amitools.vamos.Exceptions import *
from amitools.vamos.AccessMemory import AccessMemory
from amitools.vamos.VamosConfig import VamosConfig
from amitools.vamos.PathManager import PathManager
from amitools.vamos.VamosRun import VamosRun

# ----- classes -----

class MusashiCPU(CPU):
  def __init__(self):
    CPU.__init__(self,"musashi")
  def w_reg(self,reg, val):
    m68k.set_reg(reg,val)
  def r_reg(self,reg):
    return m68k.get_reg(reg)
  def w_pc(self, val):
    m68k.set_reg(m68k.M68K_REG_PC,val)
  def r_pc(self):
    return m68k.get_reg(m68k.M68K_REG_PC)
  def w_sr(self, val):
    m68k.set_reg(m68k.M68K_REG_SR,val)
  def r_sr(sefl):
    return m68k.get_reg(m68k.M68K_REG_SR)
  def pulse_reset(self):
    m68k.pulse_reset()
  def execute(self, num_cycles):
    return m68k.execute(num_cycles)
  def end(self):
    m68k.end_timeslice()

class MusashiMEM(MEM):
  def __init__(self):
    MEM.__init__(self,"musashi")
  def init(self,ram_size_kib):
    self.ram_size = ram_size_kib * 1024
    return m68k.mem_init(ram_size_kib)
  def free(self):
    m68k.mem_free()
  def reserve_special_range(self,num_pages):
    return m68k.mem_reserve_special_range(num_pages)
  def set_special_range_read_func(self,page_addr, width, func):
    m68k.mem_set_special_range_read_func(page_addr, width, func)
  def set_special_range_write_func(self,page_addr, width, func):
    m68k.mem_set_special_range_write_func(page_addr, width, func)
  def set_mem_trace_mode(self,on):
    m68k.mem_set_trace_mode(on)
  def set_mem_trace_func(self,func):
    m68k.mem_set_trace_func(func)
  def read_ram(self,width, addr):
    return m68k.mem_ram_read(width, addr)
  def write_ram(self,width, addr, val):
    m68k.mem_ram_write(width,addr,val)
  def read_ram_block(self,addr,size,data):
    m68k.mem_ram_read_block(addr,size,data)
  def write_ram_block(self,addr,size,data):
    m68k.mem_ram_write_block(addr,size,data)
  def clear_ram_block(self,addr,size,value):
    m68k.mem_ram_clear_block(addr,size,value)
  
# ----- main -----

# --- preset args ---
lib_versions = {
  'dos' : 39,
  'exec' : 39
}

# --- args ---
parser = argparse.ArgumentParser()
parser.add_argument('bin', help="AmigaOS binary to run")
parser.add_argument('args', nargs='*', help="AmigaOS binary arguments")
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be more verbos")
parser.add_argument('-q', '--quiet', action='store_true', default=False, help="do not output any logging")
parser.add_argument('-C', '--cycles', action='store', type=int, default=0, help="maximum number of cycles to execute")
parser.add_argument('-B', '--block', action='store', type=int, default=1000, help="cycles per block")
parser.add_argument('-l', '--logging', action='store', default=None, help="logging settings: <chan>:<level>,*:<level>,...")
parser.add_argument('-L', '--log-file', action='store', default=None, help="write all log messages to a file")
parser.add_argument('-i', '--lib-version', action='store', default=None, help="set lib version: <lib>:<version>,...")
parser.add_argument('-m', '--ram-size', action='store', default=1024, type=int, help="set RAM size in KiB")
parser.add_argument('-s', '--stack-size', action='store', default=4, help="set stack size in KiB")
parser.add_argument('-t', '--memory-trace', action='store_true', default=False, help="enable memory tracing (slower)")
parser.add_argument('-T', '--internal-memory-trace', action='store_true', default=False, help="enable internal memory tracing (slow)")
parser.add_argument('-c', '--config-file', action='store', default=None, help="vamos config file")
parser.add_argument('-a', '--assign', action='append', default=None, help="add AmigaOS assign: name:[+]/sys/path[,/more/path]")
parser.add_argument('-V', '--volume', action='append', default=None, help="define AmigaOS volume: name:/abs/sys/path")
parser.add_argument('-A', '--auto-assign', action='store', default=None, help="define auto assign ami path, e.g. vol:/ami/path")
args = parser.parse_args()

# --- parse args ---
if args.lib_version != None:
  for p in args.lib_version.split(','):
    n,v = p.split(':')
    lib_versions[n] = int(v)

# --- init logging ---
if not log_setup(args.logging, args.verbose, args.quiet, args.log_file):
  log_help()
  sys.exit(1)

# --- init config ---
cfg = VamosConfig(extra_file=args.config_file)

# --- load config ---
pm = PathManager()
pm.parse(cfg, args.volume, args.assign, args.auto_assign)

# ----- vamos! ---------------------------------------------------------------
cpu = MusashiCPU()
mem = MusashiMEM()
log_main.info("setting up main memory with %s KiB RAM: top=%06x" % (args.ram_size, args.ram_size * 1024))
if not mem.init(args.ram_size):
  log_main.error("can't allocate vamos RAM: %d KiB" % args.ram_size)
  sys.exit(1)
vamos = Vamos(mem, cpu, pm)

# enable mem trace?
if args.memory_trace:
  mem.set_mem_trace_mode(1)
  mem.set_mem_trace_func(vamos.label_mgr.trace_mem)
if args.internal_memory_trace:
  AccessMemory.label_mgr = vamos.label_mgr

# set invalid access handler for memory
m68k.mem_set_invalid_func(vamos.error_tracker.report_invalid_memory)

# --- setup stack ---
vamos.init_stack(args.stack_size)

# --- load segments of binary ---
if not vamos.load_main_binary(args.bin):
  sys.exit(1)
# place args in memory
vamos.init_args(args.args)

# --- libs ---
vamos.init_managers()
vamos.register_base_libs(lib_versions['exec'], lib_versions['dos'])

# --- vamos context ---
ctx = vamos.init_context()

# --- in memory process struct ---
vamos.setup_process()
vamos.open_exec_lib()
vamos.create_old_dos_guard()

# ------ main loop ------
# set CPU type
m68k.set_cpu_type(m68k.M68K_CPU_TYPE_68000)

# init cpu and initial registers
run = VamosRun(vamos)
run.init_cpu()

# set reset opcode/trap handler
m68k.set_reset_instr_callback(run.reset_func)

# main loop
exit_code = run.run(args.block, args.cycles)

# shutdown vamos
vamos.cleanup()

# clean up native memory module
mem.free()

# exit
sys.exit(exit_code)
