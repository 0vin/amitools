#!/usr/bin/env python2.7
#
# vamos [optoins] <amiga binary> [args ...]
#
# run an m68k AmigaOS binary
#
# written by Christian Vogelgsang (chris@vogelgsang.org)

import sys
import argparse
import os
import os.path

from musashi import m68k

from amitools.vamos.CPU import CPU
from amitools.vamos.Log import *
from amitools.vamos.Vamos import Vamos

# ----- classes -----

class MusashiCPU(CPU):
  def __init__(self):
    CPU.__init__(self,"musashi")
  def w_reg(self,reg, val):
    m68k.set_reg(reg,val)
  def r_reg(self,reg):
    return m68k.get_reg(reg)
  def w_pc(self, val):
    m68k.set_reg(m68k.M68K_REG_PC,val)
  def r_pc(self):
    return m68k.get_reg(m68k.M68K_REG_PC)
  def w_sr(self, val):
    m68k.set_reg(m68k.M68K_REG_SR,val)
  def r_sr(sefl):
    return m68k.get_reg(m68k.M68K_REG_SR)

# ----- main -----

# --- preset args ---
vamos_prefix = os.path.join(os.environ['HOME'],".vamos")
lib_versions = {
  'dos' : 39,
  'exec' : 39
}

# --- args ---
parser = argparse.ArgumentParser()
parser.add_argument('bin', help="AmigaOS binary to run")
parser.add_argument('args', nargs='*', help="AmigaOS binary arguments")
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be more verbos")
parser.add_argument('-c', '--cycles', action='store', type=int, default=0, help="maximum number of cycles to execute")
parser.add_argument('-b', '--block', action='store', type=int, default=1000, help="cycles per block")
parser.add_argument('-l', '--logging', action='store', default=None, help="logging settings: <chan>:<level>,*:<level>,...")
parser.add_argument('-P', '--prefix', action='store', default=vamos_prefix, help="vamos directory prefix (%s)" % vamos_prefix)
parser.add_argument('-V', '--lib-version', action='store', default=None, help="set lib version: <lib>:<version>,...")
args = parser.parse_args()
vamos_prefix = args.prefix

# --- parse args ---
if args.lib_version != None:
  for p in args.lib_version.split(','):
    n,v = p.split(':')
    lib_versions[n] = int(v)

# --- init logging ---
log_setup(args.logging)

# ----- vamos! ---------------------------------------------------------------
vamos = Vamos()

# --- setup stack & heap ---
vamos.init_stack()
vamos.init_heap()

# --- load segments of binary ---
vamos.init_segments()
if not vamos.load_main_binary(args.bin):
  log_main.error("failed loading binary: '%s' %s", args.bin, vamos.seg_loader.error)
  sys.exit(1)
vamos.init_args(args.args)

# --- libs ---
vamos.init_lib_manager()
vamos.init_dos_managers(args.prefix)
vamos.register_base_libs(lib_versions['exec'], lib_versions['dos'])

# --- vamos context ---
cpu = MusashiCPU()
ctx = vamos.init_context(cpu)

# --- in memory process struct ---
vamos.setup_process()
vamos.open_exec_lib()
vamos.create_old_dos_guard()

# ----- start cpu ------------------------------------------------------------
# prepare m68k
log_main.info("setting up m68k")
m68k.set_read_memory(*ctx.mem.get_read_funcs())
m68k.set_write_memory(*ctx.mem.get_write_funcs())
m68k.set_cpu_type(m68k.M68K_CPU_TYPE_68000)

# reset CPU with a temporary reset range
log_main.info("resetting cpu...")
vamos.setup_reset_range()
m68k.pulse_reset()
vamos.setup_execbase_range()

# setup RESET = end handler
vamos.setup_end_range()
stay = True
def end_func():
  global stay
  m68k.end_timeslice()
  stay = False
m68k.set_reset_instr_callback(end_func)

# setup arg in D0/A0
m68k.set_reg(m68k.M68K_REG_D0, vamos.arg_len)
m68k.set_reg(m68k.M68K_REG_A0, vamos.arg_base)

# to track old dos values
m68k.set_reg(m68k.M68K_REG_A2, vamos.dos_guard_base)
m68k.set_reg(m68k.M68K_REG_A5, vamos.dos_guard_base)
m68k.set_reg(m68k.M68K_REG_A6, vamos.dos_guard_base)

# ----- start main CPU loop --------------------------------------------------
log_main.info("start cpu: %06x", vamos.prog_start)
total_cycles = 0
cycles_per_run = args.block
max_cycles = args.cycles 
while stay:
  total_cycles += m68k.execute(cycles_per_run)
  # end after enough cycles
  if max_cycles > 0 and total_cycles >= max_cycles:
    break
  # if invalid reads or writes then abort
  if len(ctx.mem.invalid_access)>0:
    log_main.error("After %d cycles:", total_cycles)
    for e in ctx.mem.invalid_access:
      # show memory access error
      log_main.error(e)
      # give CPU state dump
      for d in cpu.dump_state(e.state):
        log_main.error(d)
      # PC memory range
      log_main.error("PC Range: %s  Offset: +%08x" % (e.pc_range_offset[0], e.pc_range_offset[1]))
    stay = False
log_main.info("done (%d cycles)", total_cycles)
