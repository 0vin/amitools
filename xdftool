#!/usr/bin/env python2.7
# xdftool
# swiss army knife for adf and hdf amiga disk images

import sys
import argparse
import os.path

from amitools.fs.ADFSVolume import ADFSVolume
from amitools.fs.ADFBlockDevice import ADFBlockDevice
from amitools.fs.FSError import *
from amitools.Utils import *

# ----- commands -----
class Command:
  def __init__(self, args, opts, create=False):
    self.args = args
    self.create = create
    self.opts = opts
  def run(self):
    img = self.args.image_file
    ext = img.lower()
    blkdev = None
    if ext.endswith('.adf'):
      blkdev = ADFBlockDevice(img)
    else:
      print "INVALID image file:",img
    try:
      if self.create:
        blkdev.create()
      else:
        blkdev.open()
      self.handle_blkdev(img, blkdev)
      blkdev.close()
    except FSError as e:
      print "FSError:",str(e)

class FSCommand(Command):
  def __init__(self, args, opts):
    Command.__init__(self, args, opts)
  def handle_blkdev(self, img, blkdev):
    vol = ADFSVolume(blkdev)
    vol.open()
    self.handle_vol(img,vol)
    vol.close()

# ----- Query Image -----

# list: list directory tree
class ListCmd(FSCommand):
  def handle_vol(self,img,vol):
    if len(self.opts) == 0:
      vol.root_dir.list()
    else:
      for p in self.opts:
        node = vol.get_path_name(p)
        if node != None:
          node.list()
        else:
          print "ERROR path not found:",node

class TypeCmd(FSCommand):
  def handle_vol(self,img,vol):
    p = self.opts
    if len(p) == 0:
      print "Nothing to type."
    else:
      for f in p:
        node = vol.get_file_path_name(f)
        if node != None:
          data = node.get_file_data()
          print data
        else:
          print "ERROR file not found:",f

class ReadCmd(FSCommand):
  def handle_vol(self,img,vol):
    p = self.opts
    n = len(p)
    if n == 0 or n > 2:
      print "Usage: read <ami_file> [sys_file]"
      return
    # try to get ami file  
    node = vol.get_file_path_name(p[0])
    if node == None:
      print "ERROR: file not found:",p[0]
      return
    # get data of file
    data = node.get_file_data()
    # determine output name
    if n == 1:
      out_name = node.get_file_name_str()
    else:
      out_name = p[1]
    # write data to file
    fh = open(out_name,"wb")
    fh.write(data)
    fh.close()

# ----- Edit Image -----

class FormatCmd(Command):
  def __init__(self, args, opts):
    Command.__init__(self, args, opts, create=True)
  def handle_blkdev(self, img, blkdev):
    vol = ADFSVolume(blkdev)
    vol.create("Test")
    vol.close()

class MakeDirCmd(FSCommand):
  def handle_vol(self,img,vol):
    if len(self.opts) != 1:
      print "Usage: mkdir <dir_path>"
    else:
      dir_path = self.opts[0]
      vol.create_dir(dir_path)

class WriteCmd(FSCommand):
  def handle_vol(self,img,vol):
    n = len(self.opts)
    if n == 0 or n > 2:
      print "Usage: write <sys_file> [ami_path]"
      return
    
    # read sys file
    data = None
    sys_file = self.opts[0]
    try:
      fh = open(sys_file,"rb")
      data = fh.read()
      fh.close()
    except IOError as e:
      print "ERROR reading:",sys_file
      return
    file_name = os.path.basename(sys_file)
    
    # get ami dir node
    if n == 2:
      node, file_name = vol.get_create_path_name(self.opts[1], file_name)
    else:
      node = vol.root_dir
    
    # create file
    node.create_file(file_name, data)

# ----- Bitmap Tools -----

class BitmapCmd(FSCommand):
  def handle_vol(self,img,vol):
    vol.bitmap.dump()

class FindFreeCmd(FSCommand):
  def handle_vol(self,img,vol):
    blk_num = vol.bitmap.find_free()
    if blk_num == None:
      print "No free block found"
    else:
      print "Free block:",blk_num

class FindNFreeCmd(FSCommand):
  def handle_vol(self,img,vol):
    if len(self.opts) != 1:
      print "ERROR: give number of free entries to find"
    else:
      num = int(self.opts[0])
      blk_nums = vol.bitmap.find_n_free(num)
      if blk_nums == None:
        print "No %d free blocks found" % num
      else:
        print "Free %d blocks:" % num,blk_nums

# ----- main -----
# call scanner and process all files with selected command
cmd_map = {
"list" : ListCmd,
"type" : TypeCmd,
"read" : ReadCmd,
"write" : WriteCmd,
"format" : FormatCmd,
"bitmap" : BitmapCmd,
"findfree" : FindFreeCmd,
"findnfree" : FindNFreeCmd,
"mkdir" : MakeDirCmd
}

parser = argparse.ArgumentParser()
parser.add_argument('image_file')
parser.add_argument('command_list', nargs='+', help="command: "+",".join(cmd_map.keys()))
parser.add_argument('-d', '--dump', action='store_true', default=False, help="dump the disk structure")
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be more verbos")
args = parser.parse_args()

cmd_list = args.command_list
cmd = cmd_list[0]
if not cmd_map.has_key(cmd):
  print "INVALID COMMAND:",cmd
  print "valid commands are:"
  for a in cmd_map:
    print "  ",a
  sys.exit(1)
cmd_cls = cmd_map[cmd]

# get options
if len(cmd_list) == 1:
  opts = []
else:
  opts = cmd_list[1:]

# execute command
cmd = cmd_cls(args, opts)
res = cmd.run()
sys.exit(res)
