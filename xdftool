#!/usr/bin/env python2.7
# xdftool
# swiss army knife for adf and hdf amiga disk images

import sys
import argparse
import os.path

from amitools.fs.ADFSVolume import ADFSVolume
from amitools.fs.blkdev.ADFBlockDevice import ADFBlockDevice
from amitools.fs.blkdev.HDFBlockDevice import HDFBlockDevice
from amitools.fs.FSError import *
from amitools.Utils import *

# ----- commands -----
class Command:
  def __init__(self, args, opts, create=False):
    self.args = args
    self.create = create
    self.opts = opts
  def run(self):
    img = self.args.image_file
    ext = img.lower()
    blkdev = None
    if ext.endswith('.adf'):
      blkdev = ADFBlockDevice(img)
    elif ext.endswith(".hdf"):
      blkdev = HDFBlockDevice(img)
    else:
      print "INVALID image file:",img
    try:
      if self.create:
        blkdev.create()
      else:
        blkdev.open()
      self.handle_blkdev(img, blkdev)
      blkdev.close()
    except FSError as e:
      print "FSError:",str(e)

class FSCommand(Command):
  def __init__(self, args, opts):
    Command.__init__(self, args, opts)
  def handle_blkdev(self, img, blkdev):
    vol = ADFSVolume(blkdev)
    vol.open()
    self.handle_vol(img,vol)
    vol.close()

# ----- Query Image -----

# list: list directory tree
class ListCmd(FSCommand):
  def handle_vol(self,img,vol):
    n = len(self.opts)
    if n == 0:
      vol.root_dir.list(all=True)
    else:
      node = vol.get_path_name(self.opts[0])
      if node != None:
        show_all = (n>1)
        node.list(all=show_all)
      else:
        print "ERROR path not found:",node

class TypeCmd(FSCommand):
  def handle_vol(self,img,vol):
    p = self.opts
    if len(p) == 0:
      print "Nothing to type."
    else:
      for f in p:
        node = vol.get_file_path_name(f)
        if node != None:
          data = node.get_file_data()
          print data
        else:
          print "ERROR file not found:",f

class ReadCmd(FSCommand):
  def handle_vol(self,img,vol):
    p = self.opts
    n = len(p)
    if n == 0 or n > 2:
      print "Usage: read <ami_file> [sys_file]"
      return
    # try to get ami file  
    node = vol.get_file_path_name(p[0])
    if node == None:
      print "ERROR: file not found:",p[0]
      return
    # get data of file
    data = node.get_file_data()
    # determine output name
    if n == 1:
      out_name = node.get_file_name_str()
    else:
      out_name = p[1]
    # write data to file
    fh = open(out_name,"wb")
    fh.write(data)
    fh.close()

# ----- Edit Image -----

class FormatCmd(Command):
  def __init__(self, args, opts):
    Command.__init__(self, args, opts, create=True)
  def handle_blkdev(self, img, blkdev):
    vol = ADFSVolume(blkdev)
    vol.create("Test")
    vol.close()

class MakeDirCmd(FSCommand):
  def handle_vol(self,img,vol):
    if len(self.opts) != 1:
      print "Usage: mkdir <dir_path>"
    else:
      dir_path = self.opts[0]
      vol.create_dir(dir_path)

class WriteCmd(FSCommand):
  def handle_vol(self,img,vol):
    n = len(self.opts)
    if n == 0 or n > 2:
      print "Usage: write <sys_file> [ami_path]"
      return
    
    # read sys file
    data = None
    sys_file = self.opts[0]
    try:
      fh = open(sys_file,"rb")
      data = fh.read()
      fh.close()
    except IOError as e:
      print "ERROR reading:",sys_file
      return
    file_name = os.path.basename(sys_file)
    
    # get ami dir node
    if n == 2:
      node, file_name = vol.get_create_path_name(self.opts[1], file_name)
    else:
      node = vol.root_dir
    
    # create file
    node.create_file(file_name, data)
    
class DeleteCmd(FSCommand):
  def handle_vol(self, img, vol):
    n = len(self.opts)
    if n == 0:
      print "Usage: delete <ami_path> [wipe]"
      return
    
    name = self.opts[0]
    node = vol.get_path_name(name)
    if node != None:
      do_wipe = 'wipe' in self.opts
      node.delete(wipe=do_wipe)
    else:
      print "Can't find node:",name

# ----- Bitmap Tools -----

class BitmapCmd(FSCommand):
  def handle_vol(self,img,vol):
    n = len(self.opts)
    if n == 0:
      print "Usage: bitmap ( free | used | find [n] | all | data | root [all] | node <path> ) [brief]"
      return
    cmd = self.opts[0]
    
    # brief mode
    brief = False
    if self.opts[-1] == 'brief':
      brief = True
      self.opts = self.opts[:-1]
  
    if cmd == 'free':
      vol.bitmap.print_free(brief)
    elif cmd == 'used':
      vol.bitmap.print_used(brief)
    elif cmd == 'find':
      if n == 2:
        num = int(self.opts[1])
        blk_nums = vol.bitmap.find_n_free(num)
        if blk_nums == None:
          print "No %d free blocks found" % num
        else:
          print "Free %d blocks:" % num,blk_nums
      else:
        blk_num = vol.bitmap.find_free()
        if blk_num == None:
          print "No free block found"
        else:
          print "Free block:",blk_num
    elif cmd == 'all':
      bm = vol.bitmap.create_draw_bitmap()
      vol.bitmap.draw_on_bitmap(bm)
      vol.root_dir.draw_on_bitmap(bm, True)
      vol.bitmap.print_draw_bitmap(bm, brief)
    elif cmd == 'data':
      bm = vol.bitmap.create_draw_bitmap()
      vol.bitmap.draw_on_bitmap(bm)
      vol.bitmap.print_draw_bitmap(bm, brief)
    elif cmd == 'root':
      show_all = 'all' in self.opts
      bm = vol.bitmap.create_draw_bitmap()
      vol.root_dir.draw_on_bitmap(bm, show_all)
      vol.bitmap.print_draw_bitmap(bm, brief)
    elif cmd == 'node':
      if n > 1:
        node = vol.get_path_name(self.opts[1])
        if node != None:
          show_all = 'all' in self.opts
          bm = vol.bitmap.create_draw_bitmap()
          node.draw_on_bitmap(bm, show_all)
          vol.bitmap.print_draw_bitmap(bm, brief)
        else:
          print "Node '%s' not found!" % self.opts[1]
      else:
        print "Need node path!"
    else:
      print "Unknown bitmap command!"

# ----- BlkDev Command -----

class BlkDevCmd(Command):
  def handle_blkdev(self, img, blkdev):
    blkdev.dump()

# ----- main -----
# call scanner and process all files with selected command
cmd_map = {
"list" : ListCmd,
"type" : TypeCmd,
"read" : ReadCmd,
"makedir" : MakeDirCmd,
"write" : WriteCmd,
"delete" : DeleteCmd, 
"format" : FormatCmd,
"bitmap" : BitmapCmd,
"blkdev" : BlkDevCmd
}

parser = argparse.ArgumentParser()
parser.add_argument('image_file')
parser.add_argument('command_list', nargs='+', help="command: "+",".join(cmd_map.keys()))
parser.add_argument('-d', '--dump', action='store_true', default=False, help="dump the disk structure")
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be more verbos")
args = parser.parse_args()

cmd_list = args.command_list
cmd = cmd_list[0]
if not cmd_map.has_key(cmd):
  print "INVALID COMMAND:",cmd
  print "valid commands are:"
  for a in cmd_map:
    print "  ",a
  sys.exit(1)
cmd_cls = cmd_map[cmd]

# get options
if len(cmd_list) == 1:
  opts = []
else:
  opts = cmd_list[1:]

# execute command
cmd = cmd_cls(args, opts)
res = cmd.run()
sys.exit(res)
