#!/usr/bin/env python2.7
# xdftool
# swiss army knife for adf and hdf amiga disk images

import sys
import argparse

from amitools.fs.ADFSVolume import ADFSVolume
from amitools.fs.ADFBlockDevice import ADFBlockDevice
from amitools.Utils import *

# ----- commands -----
class Command:
  def __init__(self, args, create=False):
    self.args = args
    self.create = create
  def run(self):
    img = self.args.image_file
    ext = img.lower()
    blkdev = None
    if ext.endswith('.adf'):
      blkdev = ADFBlockDevice(img)
    else:
      print "INVALID image file:",img
    if self.create:
      blkdev.create()
    else:
      blkdev.open()
    self.handle_blkdev(img, blkdev)
    blkdev.close()

class FSCommand(Command):
  def __init__(self, args):
    Command.__init__(self, args)
  def handle_blkdev(self, img, blkdev):
    vol = ADFSVolume(blkdev)
    ok = vol.open()
    if ok:
      self.handle_vol(img,vol)
    else:
      print "ERROR opening volume:",img,vol.error
    vol.close()

# list: list directory tree
class ListCmd(FSCommand):
  def handle_vol(self,img,vol):
    if len(self.args.paths) == 0:
      vol.root_dir.list()
    else:
      for p in self.args.paths:
        node = vol.get_path_name(p)
        if node != None:
          node.list()
        else:
          print "ERROR path not found:",node

class TypeCmd(FSCommand):
  def handle_vol(self,img,vol):
    p = self.args.paths
    if len(p) == 0:
      print "Nothing to type."
    else:
      for f in p:
        node = vol.get_file_path_name(f)
        if node != None:
          data = node.get_file_data()
          if data != None:
            print data
          else:
            print "ERROR getting file data:",f
        else:
          print "ERROR file not found:",f

class FormatCmd(Command):
  def __init__(self, args):
    Command.__init__(self, args, create=True)
  def handle_blkdev(self, img, blkdev):
    vol = ADFSVolume(blkdev)
    ok = vol.create("Test")
    if ok:
      print "ok"
    else:
      print "ERROR opening volume:",img,vol.error
    vol.close()

class MakeDirCmd(FSCommand):
  def handle_vol(self,img,vol):
    if len(self.args.paths) != 1:
      print "ERROR: give name of directory"
    else:
      dir_path = self.args.paths[0]
      ok = vol.create_dir(dir_path)
      print "Creating directory '%s': %s" % (dir_path,ok)

# ----- Bitmap Tools -----

class BitmapCmd(FSCommand):
  def handle_vol(self,img,vol):
    vol.bitmap.dump()

class FindFreeCmd(FSCommand):
  def handle_vol(self,img,vol):
    blk_num = vol.bitmap.find_free()
    if blk_num == None:
      print "No free block found"
    else:
      print "Free block:",blk_num

class FindNFreeCmd(FSCommand):
  def handle_vol(self,img,vol):
    if len(self.args.paths) != 1:
      print "ERROR: give number of free entries to find"
    else:
      num = int(self.args.paths[0])
      blk_nums = vol.bitmap.find_n_free(num)
      if blk_nums == None:
        print "No %d free blocks found" % num
      else:
        print "Free %d blocks:" % num,blk_nums

# ----- main -----
# call scanner and process all files with selected command
cmd_map = {
"list" : ListCmd,
"type" : TypeCmd,
"format" : FormatCmd,
"bitmap" : BitmapCmd,
"findfree" : FindFreeCmd,
"findnfree" : FindNFreeCmd,
"mkdir" : MakeDirCmd
}

parser = argparse.ArgumentParser()
parser.add_argument('command', help="command: "+",".join(cmd_map.keys()))
parser.add_argument('image_file')
parser.add_argument('paths', nargs='*')
parser.add_argument('-d', '--dump', action='store_true', default=False, help="dump the disk structure")
parser.add_argument('-v', '--verbose', action='store_true', default=False, help="be more verbos")
args = parser.parse_args()

cmd = args.command
if not cmd_map.has_key(cmd):
  print "INVALID COMMAND:",cmd
  print "valid commands are:"
  for a in cmd_map:
    print "  ",a
  sys.exit(1)
cmd_cls = cmd_map[cmd]

# execute command
cmd = cmd_cls(args)
res = cmd.run()
sys.exit(res)
