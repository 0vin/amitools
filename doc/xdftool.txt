xdftool - the universal Amiga disk image file tool
--------------------------------------------------

1. Introduction

The xdftool is a tool from the amitools tool set that allows to read disk images
intended for Amiga emulators like ADF or HDF files and display or extract their
contents. Furthermore, you can create new ADF or HDF images and copy your own 
files to it, master own images or repack existing images.


2. Usage

xdftool is a command line utility that is always called with an image file path name as the first argument and with one or more commands working on this image:

> xdftool <image.adf|image.hdf> <command> [option]

You can issue multiple commands on a single image by concatenating them with
a plus character:

> xdftool <image.[ah]df> <command1> [options1] + <command2> [options2] ...

For example:

> xdftool test.adf format "My Image" + makedir c + write myfile c


3. Commands

This section describes the commands available for xdftool.
You can always issue a "help" command to see all commands:

> xdftool test.adf help


3.1 Inspect Image

'list' - Display the list of files

SYNTAX: list [<ami_path>] [all] [info] [detail] 

DESCRIPTION: This command lists the given directory in the image. The "info" 
option appends some statistics information at the end of the list including 
used blocks, bytes and file bytes. Each file or directory is display with name, 
size, protection flags, modification date and comment (if available). The 
"detail" options replaces the comment with details on the file's storage 
including number of data blocks and file system blocks. The "all" option shows 
a directory recursively, i.e. also its contained directories. If no <ami_path> 
is given then the full contents of the volume contained in the image will be 
listed. This implies the "all" and "info" options.

EXAMPLE:

  > xdftool test.adf list         ; show whole image
  > xdftool test.adf list /       ; same command
  > xdftool test.adf list devs all   ; show "C" directory on image 


'type' - Display the contents of a file

SYNTAX: type <ami_path>

DESCRIPTION: The contents of the specified Amiga file will be written to the
standard output. This is useful to quickly see the contents of a file in an
image.

EXAMPLE:

  > xdftool wb310.adf type s/startup-sequence
  > xdftool pics.adf type mycool.ilbm | ilbmtoppm > img.ppm


'info' - Disk Image Information

SYNTAX: info

DESCRIPTION: Display information on the disk image. This will display the
number of blocks totally available in the disk image, the number of used and
free blocks. Additionally, the corresponding byte values are printed.

EXAMPLE:

  > xdftool wb310.adf info
  Blocks:   total:     1760   used:     1698  free:       62
  Bytes:    total:   901120   used:   869376  free:    31744
  
  
'Read' - Read file data or directory tree from an Image

SYNTAX: read <ami_path> [sys_path]

DESCRIPTION: If <ami_path> is a file then the file contents will be read and
copied to your hosts file system. If no <sys_path> is given then the Amiga file
will be written to the host's current directory with the base name of the 
<ami_path>.  If the <sys_path> is given and is a directory then the file will
be written there. Otherwise the <syspath> is the file name for the host file.

If the <ami_path> is a directory then the full directory structure including
files and sub directories will be transferred to the host's file system. If
no <sys_path> is given then the directory tree will be created in host's
current directory. If <sys_path> is available then the directory will be created
in this path. Otherwise the directory will be named as <sys_path>.

EXAMPLE:

  > xdftool wb310.adf read c/dir     ; copy file "dir" to host's current dir
  > xdftool wb310.adf read c/dir .   ; same command
  > xdftool wb310.adf read c/dir a   ; copy file "dir" to host file "a"
  > xdftool wb310.adf read devs      ; copy "devs" dir tree to current dir
  > xdftool wb310.adf read devs .    ; same command
  > xdftool wb310.adf read devs b    ; copy dir tree "devs" to host dir "b"


'blkdev' - Show information on the underlying block device

SYNTAX: blkdev

DESCRIPTION: Displays the number of cylinders, heads, and sectors available
in the image's block device


3.2 Edit Image

'format' - Format an existing or create a new disk image

SYNTAX: format <volume_name> [<disk_size>|<c,h,s>] [ffs] [intl] [dircache]

DESCRIPTION: A new and blank OFS/FFS file system will be created on the given
image file. All data previously stored there will be lost!!! The <volume_name>
gives the name of the new file system. The options "ffs", "intl", and or 
"dircache" allow to select the type of file system you want to create.

If you create a new ADF image then you do not need to specify a disk size. For
an HDF image the size is required: You can either give a total size, e.g. "10M" or "4G" or give the disk geometry in cylinders, heads and sectors: "650,1,32"

EXAMPLE:

  > xdftool empty.adf format "My Empty Disk"   ; create a blank OFS disk image
  > xdftool empty.hdf format Work 10M          ; create a 10M hdf image
  > xdftool empty.hdf format Work 640,1,32     ; create with given geometry
  > xdftool empty.hdf format Work 10M ffs      ; create an FFS hdf image


'boot' - Alter the boot block

SYNTAX: boot show [hex] [asm]
        boot read <file>
        boot write <file>
        boot install [boot1x]
        boot clear
        
DESCRIPTION: This command allows to inspect and modify the boot block of a disk.

The "show" command displays the contents of the boot block. The "hex" and "asm"
alloy you to add a hex dump display of the boot block and even a disassembly.
(This requires the "vda68k" disassembler in the current path)

The "read" command reads the boot code (if available) from the disk image and
stores it in the given host file. The "write" command allows you write back
boot code stored in a file to the disk image. The checksum of the block will
be adjusted automatically.

The "install" command allows to write a typical WB 2.x/3.x boot code to the
disk to make it bootable. If you specify the "boot1x" option then a WB 1.x
boot code will be written instead.

The "clear" command will remove the boot code from the boot block and 
invalidates the checksum so that the disk is not bootable anymore.

EXAMPLE:

  > xdftool my.adf boot show
  > xdftool my.adf boot read boot.code     ; read boot code from disk
  > xdftool my.adf boot write boot.code    ; write boot code back to disk
  > xdftool my.adf boot install            ; make disk bootable
  > xdftool my.adf boot clear              ; make disk not bootable anymore


'makedir' - Create a new directory

SYNTAX: makedir <ami_path>

DESCRIPTION: This will create a new directory a the given <ami_path>. Note that
all preceeding directories need to exist already otherwise an error will be
issued.

EXAMPLE:

  > xdftool empty.adf makedir c      ; create a new directory called "c"


'write' - Write a host file or a host directory tree to the image

SYNTAX: write <sys_path> [ami_path]

DESCRIPTION: If the given <sys_path> is a file then the contents of the file
will be read and stored with the same name in the top-level directory of the
image's volume. If <ami_path> is specified then the file will be stored there.
If <ami_path> is a directory then the file is placed there. Otherwise the file
will be renamed to the given name.

If the given <sys_path> is a directory then this directory including all 
contained files will be transferred to the image. If <ami_path> is given and a
directory then the host directory will be created there. Otherise the host
directory will be renamed to the given name.

EXAMPLE:

  > xdftool empty.adf write README      ; the host file "README" is written to 
                                        ; the volume's root directory
  > xdftool empty.adf write README /    ; same command
  > xdftool empty.adf write README c    ; write to "c" directory (if exists)
                                        ; or rename to file "c"
  > xdftool empty.adf write mydir       ; the host directory "mydir" is written


'delete' - Delete a file or directory

SYNTAX: delete <ami_path> [all] [wipe]

DESCRIPTION: Delete the file or directory given with <ami_path>. If a directory
is specified then it must be empty otherwise delete will fail. If you specify
"all" then the contents of a directory is deleted first and it allows you to
delete non-empty directory trees. The "wipe" option ensures that all freed
blocks in the delete operation are erased with zero bytes.

EXAMPLE:

  > xdftool mydisk.adf delete README    ; delete the "README" file
  > xdftool mydisk.adf delete c/dir     ; delete file "dir" in dir "c"
  > xdftool mydisk.adf delete c         ; delete "c" dir if its empty
  > xdftool mydisk.adf delete c all     ; delete "c" including all contents


'protect' - Change the protect flags of a file or directory

SYNTAX: protect <ami_path> [+/-]<flags>

DESCRIPTION: This command alters the protect flags associated with the given
<ami_path>. The flags to be set are given with any combination of the 
characters "hsparwed". You can prefix the flags with either "+" or "-" to add or
remove flags from the current flag set. If no prefix is given then the given
flags erase the old ones.

EXAMPLE:

  > xdftool mydisk.adf protect test rwe  ; set the flags "rwe" to file "test"
  > xdftool mydisk.adf protect test -w   ; remove the "f" flag
  > xdftool mydisk.adf protect test +d   ; add the "d" flag


'comment' - Change the comment of a file or directory

SYNTAX: comment <ami_path> <comment_string>

DESCRIPTION: The given string <comment_string> will be written as a comment to
the given <ami_path> file or directory. If you want to clear the comment then
simply set an empty string.

EXAMPLE:

  > xdftool mydisk.adf comment test "what a nice comment" ; set a comment
  > xdftool mydisk.adf comment test ""  ; remove comment/set empty one


'time' - Change the modification time of a file or directory

SYNTAX: time <ami_path> <time_string>

DESCRIPTION: This command changes the modification time associated with the
given <ami_path> file or directory. The time string must have the following
notation (and needs to be quoted because of the contained spaces):

  "06.07.1986 14:38:56 t45" or
  "06.07.1986 14:38:56"

The first notation allows to specify the number of ticks (1/50th s) in a time
stamp.

EXAMPLE:

  > xdftool mydisk.adf time test "06.07.1986 14:38:56 t45"
  > xdftool mydisk.adf time mydir "06.07.1986 14:38:56"


'relabel' - Change the name of the volume

SYNTAX: relable <new_name>

DESCRIPTION: Set a new name for the volume

EXAMPLE:

  > xdftool my.adf relabel "A New Name"


'root' - Change parameters of the root block

SYNTAX: root show
        root create_time <time_string>
        root disk_time <time_string>
        root time <time_string>

DESCRIPTION: This command set allows to show and alter the information stored
in the root block of the file system.

The "show" command displays the contents of the root block.

The "create_time", "disk_time", "time" sub commands allow you change the volume's creation, total disk and modification time respectively. All commands
require a valid time string (see 'time' command above for details).

EXAMPLE:

  > xdftool my.adf root show
  > xdftool my.adf root create_time "06.07.1986 14:38:56 t45"
  > xdftool my.adf root disk_time "06.07.1986 14:38:56"
  > xdftool my.adf root time "06.07.1986 14:38:56 t45"


3.3 Pack/Repack/Unpack Images

The xdftool provides advanced commands to convert the whole contents of a disk
image to a host file system and allows to later on reconstruct the image from
the files only.

Unpacking a disk image means that starting from the volume's root all directories and files contained in the image will be extracted to the host
file system and the same directory tree will be recreated. The host file system
structure starts with a directory named after the volume.

The host file system now contains the directory tree with all files and directories. The contents of the files is also readily available. What's still
missing are the meta infos available in the Amiga disk image but not found in
the host file system: protection flags, comments and modification time in tick
resolution.

These missing meta infos are stored in a MetaDB file called <volume>.xdfmeta.
In the header line meta infos of the volume are stored including volume name,
dos_type, and the root time stamps. Then for each file of the image an entry
line is created that states the file or directory name followed by a colon
and the meta infos: protection flags, modification time stamp and comment.

If the disk image is bootable then a file called <volume>.bootcode is created.
This holds the boot code that is required to make the disk bootable again.

Finally, for HDF images a file called <volume>.blkdev is created that holds
the disk geometry of the original HDF file. The file only contains the values
<cylinder>,<heads>,<sectors>.

With the volume's directory tree, the meta info DB and optional bootcode and
blkdev files in place you have everything on your host file system to allow
the exact recreation of an disk image later on. This recreation is called
"packing" in xdftool.

You can also use packing to "master" Amiga disk images: Simply create a volume
directory tree on your host file system and call xdftool's pack command to 
create an image file from it. If you want to adjust the meta infos then add
a .xdfmeta MetaDB file and everything will be set as needed on packing.


'unpack' - Extract a disk image to the host's file system

SYNTAX: unpack <sys_dir>

DESCRIPTION: The disk image volume's directory tree will be completely 
extracted to the host file system at <sys_dir>. First a directory with the
volume's name is created and inside all files and directories of the image.

Furthermore, a MetaDB file called <volume_name>.xdfmeta is created right next
to the volume's directory. This file stores all meta infos from the volume and
the contained files.

A <volume_name>.bootcode file is created if the disk image is bootable.
A <volume_name>.blkdev file is created to store the disk geometry of disk image's block device.

EXAMPLE:

  > xdftool mydisk.adf unpack .   ; unpack full image to current directory
  > xdftool mydisk.hdf unpack .   ; same for hard disk images
  

'pack' - Create a disk image from host files

SYNTAX: pack <volume_dir> [blkdev_size]

DESCRIPTION: If you have unpacked a disk image then you can pack it again with
this command. Simply specify the volume's directory. Note: All data available
in the disk image will be lost and overwritten!!!

If a MetaDB called <volume_dir>.xdfmeta exists then the files in the images will
be created with correct protection flags, modification time and comment.

If a boot code file called <volume_dir>.bootcode is available then this code is
written to the image's boot block and made bootable.

If a HDF image will be packed then the block device must be specified either by
specifying "blkdev_size" (e.g. "10M" or "640,1,32" see format command) or a file
called <volume_dir>.blkdev must be available with cylinder, heads, sectors
settings.

EXAMPLE:

  > xdftool newimg.adf pack WB3.1  ; pack a new disk image from host dir "WB3.1"
  > xdftool newimg.hdf pack Dir 10M ; pack host dir "Dir" into a 10M HD image


'repack' - Repack the contents of one image into another one

SYNTAX: repack <new_img.[ah]df> [blkdev_size]

DESCRIPTION: This command allows you to rebuild an existing disk image by 
combining the "unpack" and "pack" commands on the fly without creating a
host file system representation.

This command is very useful to better "stuff" and "de-fragment" data on a file
system that already performed lots of delete and create operations.

For a HDF repack you can specify the size of the new disk image with "blkdev_size" (see format command for syntax). This allows you to create 
a larger target disk. Otherwise a HDF image similar in size of the source image
will be created.

EXAMPLE:

  > xdftool old.adf repack new.adf       ; repack "old.adf" into "new.adf"
  > xdftool old.hdf repack new.hdf 10M   ; repack "old.hdf" into a 10M "new.hdf"


3.4 Low-Level Commands

xdftool also provides a set of low-level commands that let you look into details
of the file system to better understand its inner workings. These commands are
suitable for experts only.

'bitmap' - Inspect the block allaction bitmap of the file system

SYNTAX: bitmap free [brief]
        bitmap used [brief]
        bitmap find [n]
        bitmap all [brief]
        bitmap maps [bfief]
        bitmap root [brief]
        bitmap node <ami_path> [all] [entries] [brief]

DESCRIPTION: The "free" and "used" commands show the unallocated/allocated 
blocks on the disk. Use the "brief" option to show only bitmap lines with 
contents.

The "find" command calls the block allocator and tells you what would be the
next free block on the disk. Give a number "n" to reserve a sequence of blocks.

The "all" command shows all allocations in the bitmap. "maps" shows the blocks
allocated by the bitmap itself. "root" gives the root block.

The "node" command requires and <ami_path> on the image and shows the blocks
allocated for the given file or directory. If a directory is specified and
the "all" option is given then all blocks occupied by files and sub dirs are
also shown. If the "entries" option is given then a directory and its entries
are shown.

The bitmap output used different characters to code the block meaning:

  '.'   no information available
  'x'   reserved blocks
  'F'   unallocated/free block
  '#'   allocated/used block
  'V'   volume dir/root block
  'R'   root block
  'D'   directory header block
  'C'   directory cache block
  'H'   file header block
  'd'   file data block
  'E'   file extension block
  'b'   bitmap block
  'B'   bitmap extension block

EXAMPLE:

  > xdftool test.adf bitmap free brief
  > xdftool test.adf bitmap used
  > xdftool test.adf bitmap find 10
  > xdftool test.adf bitmap all
  > xdftool test.adf bitmap node C entries brief


'block' - Show blocks of the file system

SYNTAX: block boot
        block root
        block node <ami_path> [data]
        block dump <block_no>

DESCRIPTION: The "boot" and "root" sub commands simply show the boot and
root block (similar to "boot show" and "root show" commands above).

The "node" sub command requires an <ami_path> and shows all blocks associated
with this file or directory. If "data" option is given then also data blocks of
a file are included in the display. Otherwise only structure blocks are shown.

The "dump" command requires a block number and simply gives a hex dump of the
block's data

EXAMPLE:

  > xdftool test.adf block boot
  > xdftool test.adf block root
  > xdftool test.adf block node c   
  > xdftool test.adf block node myfile data
  > xdftool test.adf block dump 880


3.5 Working with RBD/RDisk Images

xdftool also supports working on partitions on a RDB (Rigid Disk Block) or 
RDisk disk image or real device. In this case you give xdftool the name of
the block device or the image and then you must issue the 'rdisk' command
as the first command in the command list. There you select the partition 
all other commands will then work on.

'rdisk' - RDB/RDisk query or partition selection.

SYNTAX: rdisk info
        rdisk show [hex]
        rdisk part <n|device_name>

DESCRIPTION: The "info" command gives a short overview of the partitions
available on the RDB image. "show" displays the block structures describing
the volume. Add the "hex" option to see the contents of the blocks, too.

Both "info" and "show" commands are not allowed in a command list and can
only be given as the only command.

Use the "part" command to select a partition on the volume. This partition
is then used for the following xdftool commands. You can either specify the
partition with a number (see "info" output) or give the device name that
is associated with it (e.g. "DH0").

EXAMPLE:

  > xdftool disk.rdisk rdisk info
  > xdftool disk.rdisk rdisk show hex
  > xdftool disk.rdisk rdisk part 0 + list
  > xdftool disk.rdisk rdisk part dh0 + info

EOF